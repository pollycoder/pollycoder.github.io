[
  
  {
    "title": "Bugs I Encountered (Week 1)",
    "url": "/posts/Bugs-I-Encountered-(Week-1)/",
    "categories": "TechNotes, Advanced Programming",
    "tags": "debug",
    "date": "2022-09-14 18:52:30 +0800",
    





    "snippet": "Four steps when you build and run your code:1. Pre-processing2. Compiling3. Assembling4. LinkingMostly bugs may happen in step 2 and 4.Why Mac treat warning as ERROR when compiling ?When I did Week 1 homework, there was a bug that only Mac users met.Source code:switch (type) {    case kNoCompression:      block_contents = raw;      break;    default:      assert(false);      break;  }Normally, this code may cause a warning:warning: enumeration value 'kSnappyCompression' not handled in switch [-Wswitch]However, when I tested on Mac, it caused an error:error: enumeration value 'kSnappyCompression' not handled in switch [-Werror,-Wswitch]Everything went right when I tested on Ubuntu. Therefore, I went to look up [Werror], and found the bug in CMakeLists.txt:Original file:if(HAVE_CLANG_THREAD_SAFETY)  target_compile_options(leveldb    PUBLIC      -Werror -Wthread-safety)endif(HAVE_CLANG_THREAD_SAFETY)Therefore the bug couldn’t be clearer any more:Mac uses clang to compile files, and here according to the CMakeLists, once you have clang to compile, the compiler will treat some warnings as ERROR !Once the bug was found, CMakeLists needed to be modified:if(HAVE_CLANG_THREAD_SAFETY)  target_compile_options(leveldb    PUBLIC      -Wthread-safety)endif(HAVE_CLANG_THREAD_SAFETY)## Delete -Werror, which means closing WerrorWe could see that everything went right then.Notes: Mac has `clang` only, the so-called 'gcc' or 'g++' are actually a `pointer to clang`. When you install `gcc` through HomeBrew, you can use `gcc command`, which meets most programmers' taste, but what is working is still `clang`!!!  That's why every trial was a failure on Mac even though you'd installed gcc.$ gcc --versionApple clang version 13.1.6 (clang-1316.0.21.2.5)Target: arm64-apple-darwin21.5.0Thread model: posixInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin"
  },
  
  {
    "title": "Cite your source",
    "url": "/posts/cite-your-source/",
    "categories": "TechNotes, Advanced Programming",
    "tags": "cite",
    "date": "2022-09-13 22:59:30 +0800",
    





    "snippet": "Whenever you copy code from others,  you have to cite the source !For details, please go to: MIT Code Writing Handbook.What should be provided  URL  Date of retrieval  ( If you adapted the code ) Add “Adapted from..” or “Based on..”  ( If you use open source software ) Copyright ( in your code ) + License ( in your workspace folder )Format of citing code sourcesExample 1——Qt comment format ( No copyright )/** * A utility class. * Adapted from [xxxx, source name] on [YYYYMMDD, date of retrieval] * Source: [URL] * [..., Other introduction] */class Util{    // Insert your code here...}Example 2 ( No copyright )// Adapted from [xxxx, source name]:// [URL, where you find it]// (Source: [URL, source code] retrieved in [YYYY MM DD]Example 3 ( Open source software )// Copyright (c) YYYY ........// ....// (You can just copy the copyright from git)"
  },
  
  {
    "title": "2022.9.12 Work Journal - Tasks",
    "url": "/posts/TaskList/",
    "categories": "WorkLog, Agile",
    "tags": "task list",
    "date": "2022-09-12 14:43:30 +0800",
    





    "snippet": "Brief introduction of Agile1. Debugging: Upper computer + Lower computer(1)Check the controller program (on IPC), make sure it’s working well.(2)Check the circuit is working, in case it’s aging or breaking.(3)Read the documentation of previous work.This step is mainly for getting familiar with the project and making sure previous work is running well.2. Camera and laser radar(Not done yet)This work is mainly on upper computer.These two components are mainly used to detect the traffic status (image processing)3. Start new researchSome possible titles:Control algorithmAutomatic driving…Discuss with tutor later."
  },
  
  {
    "title": "Usage of Ubuntu on PC installed Windows Before",
    "url": "/posts/Ubuntu-Installation/",
    "categories": "TechNotes, Ubuntu",
    "tags": "Ubuntu",
    "date": "2022-09-11 14:43:30 +0800",
    





    "snippet": "Some bugs you are going to encounter(Thanks for Danny Wu's image on his blog:https://www.idannywu.com//1203.html?preview=true)Here we use DELL computer to install Ubuntu 20.04.For installation:Bug: Partition and mount pointMy computer is not completely compatible with all the softwares in Ubuntu, which caused a lot of problem. One of the most serious problems is that partition should be done manually. Here I will provide you a solution.Caution 1: Choose something else when the system remind you to choose installation type.There might be some errors because of your disk’s file system, and you didn’t set up the mount point when you try to install ubuntu. Something else allows you to set up new partition table and set your mount point manually.Like this:Then create a new partition table:This will generate freespace:Creating two partitions is enough. One is for efi, one is for root directory /.Then just install, and wait for completing.For usage:Bug 1: Bluetooth usageMost of the times, when you try to start your bluetooth through GUI operation,  you may fail totally. Because there are some files missing on your computer or you need to generate by yourself manually.Step 1 Test your bluetooth status:hciconfig"
  },
  
  {
    "title": "Basic usage of ROS (3)",
    "url": "/posts/Basic-Usage-of-ROS-C/",
    "categories": "TechNotes, ROS",
    "tags": "ros",
    "date": "2022-09-05 14:34:30 +0800",
    





    "snippet": "How to Complete CMakeLists.txt and package.xmlIn ROS developing, CMakelists.txt and package.xml are two important files to build a package. Only the files under your package direcotry need to be modified. Since you are not sure what dependencies you are going to use at the beginning, therefore in real developing process the CMakeLists.txt and package.xml writing can’t be done completely by catkin_create_pkg.CMakeLists.txtHere are several basic commands:            Function      Command      Usage                  Environment Configuration      cmake_minimum_required(VERSION x.x.x)      Set up the minimum version of CMake installed on your computer              Environment Configuration      project(xxx)      Package name (automatiaclly generated by ROS)              Find dependencies      find_package(XX REQUIRED xxx)      Normally catkin is necessary              Add executable targets      add_executable(EXEC FILES)      EXEC-executable file name; FILES-all compilation units (.cpp)              Add target library      add_library(LIB FILES)      LIB-library name; FILES-all compilation units (.cpp)              Link libraries      target_link_libraries(EXEC LIB)      EXEC-executable file name;LIB-library name              Include header files      target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)      CMAKE_CURRENT_SOURCE_DIR=PACKAGE/src      For complete tutorials, go to ROS wiki — CMakeLists.txt for further info.Tips:Here we find that somewhere has # commented, somewhere has ## commented, somewhere has no comment. This a small trick:No comment---------This part is indispensible. You'd better not comment them or your project can't be made.# commented------This part is optional, you can uncomment them when you need.## commented-----This part is the real comment. Don't uncomment them.Package.xml"
  },
  
  {
    "title": "Basic usage of ROS (2)",
    "url": "/posts/Basic-Usage-of-ROS-B/",
    "categories": "TechNotes, ROS",
    "tags": "ros",
    "date": "2022-09-04 15:26:30 +0800",
    





    "snippet": "Basic Operations and Learning ResourcesPart 1 Learning Resources1. Official resourcesROS wikiROS answersROS wiki have the most comprehensive learning materials, including operations and package introduction.ROS answers is the official Q&amp;A community.Tips: VPN is unnecessary here. However, a VPN can make your visit faster and smoother, so better get one.2. Other convenient resourcesThe best solution when you can’t find answer on ROS wiki is GOOGLINGWhen you google, you may find many useful websites and blogs written by fully experienced developers, such as  CSDN, Stackoverflow and so on.Tips: VPN is required when googling.With those resources, your learning process may become easier.Part 2 Basic Operations1. Configure your environmentTo start ROS automatically whenever you open a new terminal, run:echo \"source /opt/ros/noetic/setup.bash\" &gt;&gt; ~/.bashrc # Write \"source\" into bash configsource ~/.bashrc # Activate new bash configNow ROS environment can be acitivated once you open a new terminal.2. Manage ROS filesystemHere are some useful commands to navigate ROS filesystem:roscd [package][/subdir]\t\t# Automatically go to /opt/ros/noeticrospack find [package]\t\t\t# Show the path of certain packagerosls [package]These commands will save you a lot of time of inputting a long file path.3. Start your workStep 1: Create a new workspaceEach time you start your work, you need a workspace to use catkin tools.mkdir -p WORKSPACE_NAME/src\t# Replace WORKSPACE_NAME with custom name of your new workspacecd WORKSPACE_NAME/src\t\t\t\t# Go to /src in your workspaceStep 2 Create a packageROS use packages to accomplish all the functions. To create your own ROS package, run:catkin_create_pkg PKG_NAME [dependency 1][dependency 2]...# Replace PKG_NAME with custom package name# If you develop ROS project with Cpp, dependency 'roscpp' is required at least# Else if you develop with Python, dependency 'rospy' is required at least# You can also add other dependencies, it depends on which packages you need to includeTips: Actually, this command mainly helps you to generate the files entailed to build your project. Therefore, if you are not sure what dependency you may need in your work, you can addroscpp/ rospy only, and add the other dependencies in CMakeLists.txt  and  package.xml later.Step 3 Build your packageGo to your package directory:cd PKG_NAMEIf you run ls , you will see:CMakeLists.txt package.xml src includeNow you can start your work like a normal Cpp or Python project. Take Cpp as example, put header files in /include, and put source files in /src,.Warning:Remember to modify CMakeLists.txt and package.xml, how to do this will  be posted in Basic Usage of ROS (3)After you finish your work, build the package:cd $PATH_OF_WORKSPACEcatkin_makecd srcIf you run ls , you will see the following:PKG_NAME CMakeLists.txtThis means building and compilation are all successful.Step 4 Test your packageUse rosrun to run your project:rosrun [package] [exec file]Warning:There is something different from ROS 2. In ROS 1, what we need to run is executable file, instead of .cpp or .py file !HOORAY !!!!!!!! Now you can create your own work now !"
  },
  
  {
    "title": "Basic usage of ROS (1)",
    "url": "/posts/Basic-Usage-of-ROS-A/",
    "categories": "TechNotes, ROS",
    "tags": "ros",
    "date": "2022-09-03 09:07:30 +0800",
    





    "snippet": "Introduction and Installation of ROSPart 1 What is ROS?ROS (Robot Operating System) is a kind of software characteristic of operating system. Currently most developers use Ubuntu to run ROS. Actually it can be used to build a real robot, not only simulations.If you want to learn ROS by yourself, you can go to ROS wiki  for details.Part 2 InstallationTips: In this essay, we recommend Ubuntu 20.04, because this is the latest version compatible with both ROS 1 and 2. Even though we do not use ROS 2 here,  since ROS 1 has already stopped updating, we are almost sure that ROS 2 might replace ROS 1 in the future.Step 1: Choose your ROS versionYou may look up the correspondence between ROS and Ubuntu versions in ROS wiki. For Ubuntu 20.04 we choose Noetic.Step 2: Setup your source.listAdd packages.ros.org to your ubuntu source list:sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'Step 3: Setup your keys and check your sourceMake sure that you’ve installed curl first. No matter whether you are sure or not, just run the following command:sudo apt install curlDo not worry that you may get two curls in your Ubuntu. If you’ve installed curl before, this command will do the update check only.Then add keys:curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc # Use curl to download ros.ascsudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654Warning:Don't just copy the command from ros wiki, because the command provided didn't provide the  pubkey, if you cmd c+v unquestioningly, you may see an error report like this when you try the next step:This is because you didn't sign the source.Now you can check your sources:sudo apt updateStep 4 Install ROSHere we recommend Desktop-full Install, because the features in this version are the most complete, and it also contains tutorial projects.sudo apt install ros-noetic-desktop-fullp.s. If you want to install more other packages ROS doesn't have, use the following command:sudo apt install ros-noetic-PACKAGE # Replace PACKAGE with target package nameStep 5 Setup the environmentROS environment is quite like bash, use the following command to source ros-bash:source /opt/ros/noetic/setup.bashecho \"source /opt/ros/noetic/setup.bash\" &gt;&gt; ~/.bashrc source ~/.bashrc # Whenever you open your local bash, 'setup.bash' will be sourced automatically# If you use zsh, replace 'bashrc' with 'zshrc'Step 6 Install dependenciesThe work we’ve already done before allows us to run ros core packages. To make more convenience for your work, here some useful tools that are necessary. To install them, run the following command:sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential# rosdep, rosinstall, wstool, etc.Before you use the tools, you need to initialize rosdep:sudo rosdep initrosdep updateWarning:Some times you may get an error report like this:If you encounter this problem, follow the following steps:  Ping the domain:ping raw.githubusercontent.com# 'raw.githubusercontent.com' is mainly used to store files (except source code), we download non-code files from here.If it can’t work, please check your network status. If it works,  go to the next step.  Find ip address of the domain:Tips: Here we recommend ipaddress.com, which is useful when looking up the ip address of one URL.As forraw.githubusercontent.com, here are several common ip addresses:      185.199.108.133        185.199.109.133        185.199.110.133        185.199.111.133  The tip is just my experience, the ip may change sometimes, anyway, the core task is to find out the IP address.Add the IP address to ~/etc/hosts, save and close the file.  Retry step 1. If it doesn’t work,  you may need to complete the process of ‘rosdep init’ command manually.Tips: In linux, everything is file. If a command cannot work, the most possible reason is file loss. Therefore, if we can recover the missing files, most of the problems can be solved.Just find another computer with ros,  compare the files and directories in /ros of the two computers, and add the file by yourself.Warning: This is extremely unrecommended ! Because you are not sure whether other tools have the same problem. Also, keeping your network active is necessary for all work, so trying step 1 and step 2 is enough, if it can't work, I highly suggest you to change a computer...HOORAY !!!!!!!! You've already finished all the steps, and now you can explore ROS as you wish !"
  }
  
]

