I"i<h1 id="origianl-problem">Origianl Problem</h1>

<p><big><b>Give you a number $n$, print the full permutation of the number list $(1\to n)$.</b></big></p>

<h1 id="my-solution">My Solution</h1>

<p>Here we use <code class="language-plaintext highlighter-rouge">recursion</code>. My source code is listed below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
</pre></td> --><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python3
</span>

<span class="s">"""
 Permutation with recursion
 Written by Polly Zhou, Tsinghua University
 E-mail:
    pollyjoe2003@gmail.com
 Solution:
    Fix one element, and permute the remaining elements.
 Acknowledgement:
    CSDN blog: Output the Full Permutation of A List
    URL: https://blog.csdn.net/yezi1993/article/details/84143458
"""</span>


<span class="c1">################################
# Generate the number list: 1--n
################################
</span><span class="k">def</span> <span class="nf">list_generator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">num_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
        <span class="n">num_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">num_list</span>


<span class="c1">####################################################
# Permutation
# We use recursion to solve the problem:
# For each trial, pick one element as the first one, 
# and permute the remaining elements
####################################################
</span><span class="k">def</span> <span class="nf">permutation</span><span class="p">(</span><span class="n">input_list</span><span class="p">):</span>
    <span class="n">result_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">input_list</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">length</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">result_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">input_list</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result_list</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
            <span class="c1"># Fix element [i]
</span>            <span class="n">temp_list</span> <span class="o">=</span> <span class="n">input_list</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">input_list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">input_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">per_list</span> <span class="o">=</span> <span class="n">permutation</span><span class="p">(</span><span class="n">temp_list</span><span class="p">)</span>
            <span class="n">result_list</span> <span class="o">+=</span> <span class="p">[[</span><span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="n">j</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">per_list</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">result_list</span>


<span class="c1">##################
# Print the result
##################
</span><span class="k">def</span> <span class="nf">perm_print</span><span class="p">(</span><span class="n">result_list</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">result_list</span><span class="p">)):</span>
        <span class="n">output_str</span> <span class="o">=</span> <span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">result_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">print</span><span class="p">(</span><span class="n">output_str</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">input_n</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
    <span class="n">original_list</span> <span class="o">=</span> <span class="n">list_generator</span><span class="p">(</span><span class="n">input_n</span><span class="p">)</span>
    <span class="n">output_list</span> <span class="o">=</span> <span class="n">permutation</span><span class="p">(</span><span class="n">original_list</span><span class="p">)</span>
    <span class="n">perm_print</span><span class="p">(</span><span class="n">output_list</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If we sometimes see a function calling itself inside itself, that is recursion.</p>

<blockquote class="prompt-tip">
  <p>My idea:<br />
Recursion is an important way of thinking.<br />
The main idea of recursion is to imitate. Because each time you call the function inside itself, it is solving the same problem, just with a lower dimension.<br />
Therefore, for this problem, we can assign one element as the first one, do the permutation to the remaining elements, put all the situations together and we will get a full permutation.</p>
</blockquote>
:ET