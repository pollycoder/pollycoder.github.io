I"M"<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=27069718&amp;auto=1&amp;height=66"></iframe>

<h1 id="basic-operations-and-learning-resources">Basic Operations and Learning Resources</h1>

<h2 id="part-1-learning-resources">Part 1 Learning Resources</h2>

<h3 id="1-official-resources">1. Official resources</h3>

<p><a href="http://wiki.ros.org/">ROS wiki</a></p>

<p><a href="https://answers.ros.org/">ROS answers</a></p>

<p>ROS wiki have the most comprehensive learning materials, including operations and package introduction.</p>

<p>ROS answers is the official Q&amp;A community.</p>

<blockquote class="prompt-tip">
  <p>VPN is unnecessary here. However, a VPN can make your visit faster and smoother, so better get one.</p>
</blockquote>

<h3 id="2-other-convenient-resources">2. Other convenient resources</h3>

<p>The best solution when you can’t find answer on ROS wiki is<b><code class="language-plaintext highlighter-rouge"> GOOGLING</code></b></p>

<p>When you google, you may find many useful websites and blogs written by fully experienced developers, such as <a href="https://www.csdn.net/"> CSDN</a>, <a href="https://stackoverflow.com/">Stackoverflow</a> and so on.</p>

<blockquote class="prompt-warning">
  <p>VPN is required when googling.</p>
</blockquote>

<p><b><big><font color="pink">With those resources, your learning process may become easier.</font></big></b></p>

<h2 id="part-2-basic-operations">Part 2 Basic Operations</h2>

<h3 id="1-configure-your-environment">1. Configure your environment</h3>

<p>To start ROS automatically whenever you open a new terminal, run:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s2">"source /opt/ros/noetic/setup.bash"</span> <span class="o">&gt;&gt;</span> ~/.bashrc <span class="c"># Write "source" into bash config</span>
<span class="nb">source</span> ~/.bashrc <span class="c"># Activate new bash config</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now ROS environment can be acitivated once you open a new terminal.</p>

<h3 id="2-manage-ros-filesystem">2. Manage ROS filesystem</h3>

<p>Here are some useful commands to navigate ROS filesystem:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre>roscd <span class="o">[</span>package][/subdir]		<span class="c"># Automatically go to /opt/ros/noetic</span>
rospack find <span class="o">[</span>package]			<span class="c"># Show the path of certain package</span>
rosls <span class="o">[</span>package]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>These commands will save you a lot of time of inputting a long file path.</p>

<h3 id="3-start-your-work">3. Start your work</h3>

<h4 id="step-1-create-a-new-workspace">Step 1: Create a new workspace</h4>

<p>Each time you start your work, you need a <code class="language-plaintext highlighter-rouge">workspace</code> to use <code class="language-plaintext highlighter-rouge">catkin tools</code>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nb">mkdir</span> <span class="nt">-p</span> WORKSPACE_NAME/src	<span class="c"># Replace WORKSPACE_NAME with custom name of your new workspace</span>
<span class="nb">cd </span>WORKSPACE_NAME/src				<span class="c"># Go to /src in your workspace</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="step-2-create-a-package">Step 2 Create a package</h4>

<p>ROS use <code class="language-plaintext highlighter-rouge">packages</code> to accomplish all the functions. To create your own ROS package, run:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre>catkin_create_pkg PKG_NAME <span class="o">[</span>dependency 1][dependency 2]...
<span class="c"># Replace PKG_NAME with custom package name</span>
<span class="c"># If you develop ROS project with Cpp, dependency 'roscpp' is required at least</span>
<span class="c"># Else if you develop with Python, dependency 'rospy' is required at least</span>
<span class="c"># You can also add other dependencies, it depends on which packages you need to include</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote class="prompt-tip">
  <p>Actually, this command mainly helps you to generate the files entailed to build your project. Therefore, if you are not sure what dependency you may need in your work, you can add<code class="language-plaintext highlighter-rouge">roscpp</code>/ <code class="language-plaintext highlighter-rouge">rospy</code> only, and add the other dependencies in <code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>  and  <code class="language-plaintext highlighter-rouge">package.xml</code> later.</p>
</blockquote>

<h4 id="step-3-build-your-package">Step 3 Build your package</h4>

<p>Go to your package directory:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="nb">cd </span>PKG_NAME
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you run <code class="language-plaintext highlighter-rouge">ls</code> , you will see:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="go">CMakeLists.txt package.xml src include
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Now you can start your work like a normal Cpp or Python project. Take Cpp as example, put header files in <code class="language-plaintext highlighter-rouge">/include</code>, and put source files in <code class="language-plaintext highlighter-rouge">/src,</code>.</p>

<blockquote class="prompt-danger">
  <p>Remember to modify CMakeLists.txt and package.xml, how to do this will be posted in <a href="https://blog.polly-mindpalace.xyz/posts/Basic-Usage-of-ROS-C/"><b>Basic Usage of ROS (3)</b></a></p>
</blockquote>

<p>After you finish your work, build the package:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="nb">cd</span> <span class="nv">$PATH_OF_WORKSPACE</span>
catkin_make
<span class="nb">cd </span>src
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you run <code class="language-plaintext highlighter-rouge">ls </code>, you will see the following:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="go">PKG_NAME CMakeLists.txt
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>This means building and compilation are all successful.</p>

<h4 id="step-4-test-your-package">Step 4 Test your package</h4>

<p>Use <code class="language-plaintext highlighter-rouge">rosrun</code> to run your project:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre>rosrun <span class="o">[</span>package] <span class="o">[</span><span class="nb">exec </span>file]
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote class="prompt-warning">
  <p>There is something different from ROS 2. In ROS 1, what we need to run is executable file, instead of .cpp or .py file !</p>
</blockquote>

<p><b><big><font color="pink">HOORAY !!!!!!!! Now you can create your own work now !</font></big></b></p>

:ET