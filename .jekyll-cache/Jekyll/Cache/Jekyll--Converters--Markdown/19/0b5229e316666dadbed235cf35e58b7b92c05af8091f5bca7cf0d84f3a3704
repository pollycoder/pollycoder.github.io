I"({<h3 id="problom-1-wrong-number">Problom 1 Wrong number</h3>

<h4 id="original-problem">Original Problem:</h4>

<p>Give you a string, extract all the negative numbers from the string.</p>

<p>e.g. (Source code:<a href="https://oj.cs.tsinghua.edu.cn/course/8/contest/170/problem/0"> THU OJ</a>)</p>

<p>Input:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="go">This line contains 1 integer "one".
This line contains no integer.
233, next line is empty.

If you got -123.456, you should output 123 and 456.
Any digit string are considered integers, like 0123456 and 007.
You may also need to consider cases like a0a12a345a6789a.
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Output:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="go">1

233

123 456 123 456
0123456 007
0 12 345 6789
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="solution">Solution:</h4>

<ol>
  <li>
    <p>The main idea of the source code:</p>

    <p>Find the first number of each string, then find the last number of the string, here we have a total number string.</p>

    <p>Decide whether it is the first string, if not so, output a SPACE.</p>
  </li>
  <li>
    <p>Bugs in the idea of the sorce code:</p>
  </li>
</ol>

<p>(1) The source code didn’t initialize the bool-type variable.</p>

<p>(2) The source code mistakes the ASCII code between character and number:</p>

<p><code class="language-plaintext highlighter-rouge">'0'-'9' VS 0-9 </code></p>

<ol>
  <li>
    <p>My solution</p>

    <p>I chose to judge whether the number string is the last one (because I’m accustomed to output a space behind a string [Facepalm])</p>
  </li>
</ol>

<p>My source code:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td> --><td class="rouge-code"><pre><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cctype&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span> <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span> <span class="p">)</span> <span class="p">{</span>
        <span class="kt">bool</span> <span class="n">if_final</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        
        <span class="kt">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
       <span class="cm">/*********************************************************************************************************************
        * Judge whether the character is a number.
        * If so, find the last number following it.
        * Find out whether it is the last number string by judging whether there is still number behind this string
        * If so, it is not the last string, and you need to output a SPACE.
        *********************************************************************************************************************/</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">){</span>
                <span class="kt">size_t</span> <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="k">while</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">){</span>
                    <span class="n">putchar</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
                    <span class="o">++</span><span class="n">index</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kt">size_t</span> <span class="n">inspect_back</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
                <span class="k">while</span><span class="p">((</span><span class="n">str</span><span class="p">[</span><span class="n">inspect_back</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'0'</span> <span class="o">||</span> <span class="n">str</span><span class="p">[</span><span class="n">inspect_back</span><span class="p">]</span> <span class="o">&gt;</span> <span class="sc">'9'</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">inspect_back</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span>
                    <span class="o">++</span><span class="n">inspect_back</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">inspect_back</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">inspect_back</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span>
                        <span class="n">if_final</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">if_final</span><span class="p">)</span> <span class="n">putchar</span><span class="p">(</span><span class="sc">' '</span><span class="p">);</span>
                <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
                <span class="n">if_final</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="problem-2-wrong-drink">Problem 2 Wrong drink</h3>

<h4 id="original-problem-1">Original problem:</h4>

<p>Give you several kinds of wine, the density is $d_i$, the price is $p_i$. Now input a series of densities, the program should output the lowest cost.</p>

<p>(Source code: <a href="https://oj.cs.tsinghua.edu.cn/course/8/contest/170/problem/1">THU OJ</a>)</p>

<h4 id="solution-1">Solution:</h4>

<ol>
  <li>
    <p>The idea of the source code is treating pairs ($d_i$, $p_i$) as a point of a 2-dimensional surface, find the convex hull, and pick two wines on the hull.</p>
  </li>
  <li>
    <p>Bugs in the idea:</p>
  </li>
</ol>

<p>(1) The automatically called constructor and destructor: HERE WE HAVE AN EXAMPLE</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td> --><td class="rouge-code"><pre><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">class</span> <span class="nc">NewClass</span><span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">NewClass</span><span class="p">(){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Constructor !"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
    <span class="o">~</span><span class="n">NewClass</span><span class="p">(){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Destructor !"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Object:</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">NewClass</span> <span class="n">cls</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    
    <span class="n">printf</span><span class="p">(</span><span class="s">"Pointer:</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">NewClass</span><span class="o">*</span> <span class="n">ptr1</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    
    <span class="n">printf</span><span class="p">(</span><span class="s">"New a pointer:</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">NewClass</span><span class="o">*</span> <span class="n">ptr2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NewClass</span><span class="p">();</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    
    <span class="c1">// delete ptr2;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Output:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre><span class="go">Object:
Constructor !

Pointer:

New a pointer:
Constructor !

Destructor !
Program ended with exit code: 0
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Here we can find that if we just declare a pointer, both the two functions won’t be called automatically.</p>

<p>If you new a pointer, the constructor will be called automatically, while the destructor won’t.</p>

<p>If you declare an object, both the two functions will be called automatically.</p>

<p>Therefore we conclude that the automatically-called mechanism only works for objects. For pointer, sorry, you need to operate them manually.</p>

<p>(2) Special situations</p>

<p>Sometimes the new wine can’t be made: the minimum density is larger than the given density or the maximum density is smaller than given density. We need to deal with them seperately.</p>

<p>My source code:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
</pre></td> --><td class="rouge-code"><pre><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iomanip&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// A bottle of wine</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">dpair</span><span class="p">;</span>

<span class="c1">// Node</span>
<span class="cm">/***********************************************
 * Initialized value = 0;
 * Counter = 0 &lt;===&gt; Nope or destroyed
 * Counter = 1 &lt;===&gt; Created
************************************************/</span>
<span class="k">struct</span> <span class="nc">Wine</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">d</span><span class="p">,</span> <span class="n">p</span><span class="p">;</span>
    <span class="n">Wine</span><span class="o">*</span> <span class="n">last</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">counter</span><span class="p">;</span>
    <span class="n">Wine</span><span class="p">()</span> <span class="p">{</span> <span class="o">++</span><span class="n">counter</span><span class="p">;</span> <span class="p">}</span>
    <span class="o">~</span><span class="n">Wine</span><span class="p">()</span> <span class="p">{</span> <span class="o">--</span><span class="n">counter</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="n">Wine</span><span class="o">::</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="cm">/*****************************************************************
 * Memory inspector, NO MODIFYING !!!!
 * It will be destroyed when the programme ends,
 * If counter != 0, it means that the wine is not destructed
 *****************************************************************/</span>
<span class="k">struct</span> <span class="nc">Checker</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">_</span><span class="p">;</span>
    <span class="o">~</span><span class="n">Checker</span><span class="p">()</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="n">Wine</span><span class="o">::</span><span class="n">counter</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你的对象没有正确释放!</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span> <span class="n">_c</span><span class="p">;</span>


<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">dpair</span><span class="o">&gt;</span> <span class="n">wines</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">qs</span><span class="p">;</span>
    
    <span class="c1">// Input n,m and the density &amp; price of each bottle of wine</span>
    <span class="c1">// Create a wine shelf</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">d</span><span class="p">,</span> <span class="n">p</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="n">p</span><span class="p">;</span>
        <span class="n">wines</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">dpair</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">p</span><span class="p">));</span>
    <span class="p">}</span>
    
    <span class="c1">// Sort according to density</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">wines</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">wines</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="c1">// Create a new list</span>
    <span class="n">Wine</span><span class="o">*</span> <span class="n">phead</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="n">Wine</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Read in wine[i], you can say q = the corresponding struct node</span>
        <span class="k">auto</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Wine</span><span class="p">;</span>
        <span class="n">q</span><span class="o">-&gt;</span><span class="n">d</span> <span class="o">=</span> <span class="n">wines</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
        <span class="n">q</span><span class="o">-&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="n">wines</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
        <span class="c1">// If two wines have the same value of d, discard the one whose q is bigger</span>
        <span class="k">if</span> <span class="p">(</span> <span class="n">phead</span> <span class="o">&amp;&amp;</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">d</span> <span class="o">==</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">d</span><span class="p">)</span> <span class="n">q</span><span class="o">-&gt;~</span><span class="n">Wine</span><span class="p">();</span>
        
        <span class="c1">// If phead and its tail aren't NULL</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">phead</span> <span class="o">!=</span> <span class="nb">nullptr</span> <span class="o">&amp;&amp;</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">last</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Compare slope factor, delete the nodes away from the list</span>
            <span class="c1">// Convert the denominator to double type to avoid singular point </span>
            <span class="k">if</span> <span class="p">((</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">p</span> <span class="o">-</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">d</span> <span class="o">-</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">d</span><span class="p">)</span> <span class="o">&lt;=</span>
                <span class="p">(</span><span class="n">phead</span><span class="o">-&gt;</span><span class="n">p</span> <span class="o">-</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">last</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">)</span> <span class="o">/</span><span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">phead</span><span class="o">-&gt;</span><span class="n">d</span> <span class="o">-</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">last</span><span class="o">-&gt;</span><span class="n">d</span><span class="p">)){</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="n">phead</span><span class="p">;</span>
                <span class="n">phead</span> <span class="o">=</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">last</span><span class="p">;</span>
                <span class="n">temp</span><span class="o">-&gt;~</span><span class="n">Wine</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="c1">// If phead isn't NULL or phead doesn't match q</span>
        <span class="c1">// The first loop go to here</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">phead</span> <span class="o">||</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">d</span> <span class="o">!=</span> <span class="n">phead</span><span class="o">-&gt;</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">q</span><span class="o">-&gt;</span><span class="n">last</span> <span class="o">=</span> <span class="n">phead</span><span class="p">;</span>
            <span class="n">phead</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Use vector to search</span>
    <span class="n">wines</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="n">phead</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">-&gt;</span><span class="n">last</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">wines</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">dpair</span><span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">d</span><span class="p">,</span> <span class="n">i</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="c1">// Delete the list</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="n">phead</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">-&gt;</span><span class="n">last</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">i</span><span class="o">-&gt;~</span><span class="n">Wine</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="n">reverse</span><span class="p">(</span><span class="n">wines</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">wines</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    
    <span class="n">cout</span><span class="p">.</span><span class="n">setf</span><span class="p">(</span><span class="n">ios</span><span class="o">::</span><span class="n">fixed</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">q</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
        
        <span class="c1">// Find the point which is the nearest to the the lowest hull</span>
        <span class="c1">// Here price is initialized to 0</span>
        <span class="k">if</span><span class="p">((</span><span class="n">wines</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">wines</span><span class="p">[</span><span class="n">wines</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">))</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">wines</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">wines</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">dpair</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
            <span class="k">auto</span> <span class="n">ib</span> <span class="o">=</span> <span class="n">it</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="kt">double</span> <span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">-</span> <span class="n">q</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">-</span> <span class="n">ib</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">)</span> <span class="o">*</span> <span class="n">ib</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="n">ib</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">-</span> <span class="n">ib</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">)</span> <span class="o">*</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">setprecision</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>        
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="acknowledgement">Acknowledgement:</h4>

<p>Thanks for Zhixiao Xiong(熊志潇，未央工-11)’s help, after several days’ debugging, we finally found the reason why the object couldn’t be released correctly.</p>
:ET